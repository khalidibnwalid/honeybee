package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"khalidibnwalid/luma_server/internal/graph"
	graph_models "khalidibnwalid/luma_server/internal/graph/models"
	"khalidibnwalid/luma_server/internal/models"
	"log"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input graph_models.SignupInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Signup - signup"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input graph_models.LoginInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*models.User, error) {
	uuid, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("INVALID_UUID_FORMAT")
	}

	user := &models.User{
		ID: uuid,
	}

	if err := user.GetByID(r.ServerContext.DB, uuid); err != nil {
		if err.Error() == gorm.ErrRecordNotFound.Error() {
			return nil, fmt.Errorf("USER_NOT_FOUND")
		}

		log.Println("database error:", err)
		return nil, fmt.Errorf("INTERNAL_SERVER_ERROR")
	}

	return user, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	return obj.ID.String(), nil
}

// AvatarURL is the resolver for the avatarUrl field.
func (r *userResolver) AvatarURL(ctx context.Context, obj *models.User) (*string, error) {
	return &obj.AvatarURL.String, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *models.User) (*string, error) {
	st := obj.CreatedAt.String()
	return &st, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *models.User) (*string, error) {
	st := obj.UpdatedAt.String()
	return &st, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
